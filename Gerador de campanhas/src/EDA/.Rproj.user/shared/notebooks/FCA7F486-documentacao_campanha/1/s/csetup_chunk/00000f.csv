"0","knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)"
"0",""
"0","# definindo log de avisoa"
"0","options(warn = -1)"
"0",""
"0","#libraries"
"0","library(readr)"
"2","Aviso: pacote ‘readr’ foi compilado no R versão 4.4.3"
"0","library(dplyr)"
"2","Aviso: pacote ‘dplyr’ foi compilado no R versão 4.4.3"
"0","library(tidyr)"
"2","Aviso: pacote ‘tidyr’ foi compilado no R versão 4.4.3"
"0","library(ggplot2)"
"2","Aviso: pacote ‘ggplot2’ foi compilado no R versão 4.4.3"
"0","library(lattice)"
"0","library(patchwork)"
"2","Aviso: pacote ‘patchwork’ foi compilado no R versão 4.4.3"
"0","# Carregando dados"
"0","## Amostra contendo dados dos últimos 30 dias"
"0",""
"0","amostra <- read_csv(""y:/FINANCEIRO/Fagner/Thais/Gerador de campanhas/input_data/tendencia.csv"")"
"0",""
"0","amostra_limpa <- amostra[complete.cases(amostra), ]"
"0","dados_prod <- amostra_limpa[, c('jan_prod', 'fev_prod', 'mar_prod', 'abr_prod', 'mai_prod', 'jun_prod', 'jul_prod')]"
"0","dados_prod <- dados_prod %>%"
"0","  mutate("
"0","    ret_fev = round(((fev_prod / jan_prod) - 1) * 100, 2),"
"0","    ret_mar = round(((mar_prod / fev_prod) - 1) * 100, 2),"
"0","    ret_abr = round(((abr_prod / mar_prod) - 1) * 100, 2),"
"0","    ret_mai = round(((mai_prod / abr_prod) - 1) * 100, 2),"
"0","    ret_jun = round(((jun_prod / mai_prod) - 1) * 100, 2),"
"0","    ret_jul = round(((jul_prod / jun_prod) - 1) * 100, 2),"
"0","  )"
"0",""
"0","df_retorno <- dados_prod[, c(""ret_fev"", ""ret_mar"", ""ret_abr"", ""ret_mai"", ""ret_jun"")]"
"0","df_retorno$mean_var <- rowMeans(df_retorno)"
"0","index_outliers <- scale(df_retorno$mean_var) > 2"
"0","df_retorno <- df_retorno[!index_outliers, ]"
"0",""
"0","# dataset com valores"
"0","df_valores <- dados_prod[, c('jan_prod', 'fev_prod', 'mar_prod', 'abr_prod', 'mai_prod', 'jun_prod', 'jul_prod')]"
"0","df_valores$mean_var <- rowMeans(df_valores)"
"0","index_outliers <- scale(df_valores$mean_var) > 2"
"0",""
"0","df_valores_in <- df_valores[!index_outliers, ]"
"0","df_valores_out <- df_valores[index_outliers, ]"
"0",""
"0",""
"0","## função para retornar o desvio padrão de dados log-transformados"
"0","retorno_sd_des_logtransformtation <- function(log_mean, log_deviation){"
"0","      "
"0","  standart_deviation = sqrt((exp(log_deviation **2) - 1) * "
"0","             exp(2 * log_mean + log_deviation ** 2))"
"0",""
"0","  return(standart_deviation)"
"0","  "
"0","}"
"0",""
"0","# Congelando aleatoriedade"
"0","set.seed(40)"
"0",""
"0",""
